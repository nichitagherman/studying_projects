all_data <- readRDS("all_data_final.RData")
plot(all_data$log_ret_var_alpha1[[1]])
all_data$log_ret_var_alpha1
all_data <- readRDS("all_data_final.RData")
all_data$log_ret_es_alpha1
all_data %>% head()
library(PerformanceAnalytics)
library(xml2)
library(rvest)
library(zoo)
library(tidyverse)
library(tidyverse)
library(rugarch)
library(tidyverse)
library(rugarch)
library(lubridate)
library(parallel)
library(parallel)
library(shiny)
all_data <- readRDS("all_data_final.RData")
all_data %>% head()
all_data %>% head()
plot(all_data$log_ret_es_alpha1[[1]])
all_data <- readRDS("all_data_final.RData")
all_data %>% head()
all_data$currency_name
plot(all_data$log_ret_es_alpha1[[7]])
plot(all_data$log_ret_es_alpha1[[8]])
#### Transformation of initial series ####
# Load extracted data on cryptocurrencies prices
all_data <- readRDS("all_data.RData")
# Convert zoo series in xts
all_data <- all_data %>% mutate(data = map(data, ~ as.xts(., by.order = index(.))))
# Add in all_data columns for log-returns and net-returns
fun_log <- function(x){
CalculateReturns(as.xts(x %>% unlist(), by.order = index(x)),
method = "log")
}
fun_net <- function(x){
CalculateReturns(as.xts(x %>% unlist(), by.order = index(x)),
method = "simple")
}
all_data <- all_data %>% mutate(log_ret = map(data, fun_log),
net_ret = map(data, fun_net))
# Drop the first observations from series as there are NAs in returns
all_data <- all_data %>% mutate(data = map(data, ~ .[-1, ]),
log_ret = map(log_ret, ~ .[-1, ]),
net_ret = map(net_ret, ~ .[-1, ]))
all_data %>% filter(map_int(data, ~ start(.) < ymd("2018-05-01")) %>% as.logical()) %>% nrow()
all_data %>% filter(map_int(data, ~ start(.) < ymd("2018-05-02")) %>% as.logical()) %>% nrow()
all_data %>% filter(map_int(data, ~ start(.) < ymd("2018-05-05")) %>% as.logical()) %>% nrow()
all_data %>% filter(map_int(data, ~ start(.) < ymd("2018-05-10")) %>% as.logical()) %>% nrow()
all_data %>% filter(map_int(data, ~ start(.) < ymd("2018-05-15")) %>% as.logical()) %>% nrow()
all_data %>% filter(map_int(data, ~ start(.) < ymd("2018-06-01")) %>% as.logical()) %>% nrow()
all_data <- readRDS("all_data_final.RData")
#### Transformation of initial series ####
# Load extracted data on cryptocurrencies prices
all_data <- readRDS("all_data.RData")
# Convert zoo series in xts
all_data <- all_data %>% mutate(data = map(data, ~ as.xts(., by.order = index(.))))
# Add in all_data columns for log-returns and net-returns
fun_log <- function(x){
CalculateReturns(as.xts(x %>% unlist(), by.order = index(x)),
method = "log")
}
fun_net <- function(x){
CalculateReturns(as.xts(x %>% unlist(), by.order = index(x)),
method = "simple")
}
all_data <- all_data %>% mutate(log_ret = map(data, fun_log),
net_ret = map(data, fun_net))
# Drop the first observations from series as there are NAs in returns
all_data <- all_data %>% mutate(data = map(data, ~ .[-1, ]),
log_ret = map(log_ret, ~ .[-1, ]),
net_ret = map(net_ret, ~ .[-1, ]))
all_data %>% filter(map_int(data, ~ sum(index(.) < ymd("2018-05-01")) == length(.)) %>% as.logical())
all_data %>% filter(map_int(data, ~ sum(index(.) > ymd("2018-05-01")) == length(.)) %>% as.logical())
all_data <- readRDS("all_data_final.RData")
plot(all_data$log_ret_var_alpha1[[1]])
?ESTest
?VaRTest
?CalculateReturns
install.packages("rsconnect")
rsconnect::setAccountInfo(name='ngerman',
secret='<SECRET>'
rsconnect::setAccountInfo(name='ngerman',
token='C1AEDC018368104A2DC37BC460DA9CA4',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='ngerman',
token='C1AEDC018368104A2DC37BC460DA9CA4',
secret='<SECRET>')
rsconnect::setAccountInfo(name='ngerman',
token='C1AEDC018368104A2DC37BC460DA9CA4',
secret='<SECRET>')
library(rsconnect)
rsconnect::setAccountInfo(name='ngerman',
token='C1AEDC018368104A2DC37BC460DA9CA4',
secret='<SECRET>')
rsconnect::setAccountInfo(name='ngerman',
token='C1AEDC018368104A2DC37BC460DA9CA4',
secret='PQ5Aqzfp3RgUmY3LgXfVGKA2azGOzqL13D7SM3lG')
index_coins <- seq(1, n_coins)
index_coins <- seq(1, 100)
# The average of the following columns values will define portfolio characteristics:
cols_portfolio1 <- c("log_ret", "net_ret")
cols_portfolio2 <- c("log_ret_var_alpha1", "log_ret_es_alpha1",
"net_ret_var_alpha1", "net_ret_es_alpha1", "log_ret_var_alpha2",
"log_ret_es_alpha2", "net_ret_var_alpha2", "net_ret_es_alpha2",
"log_ret_var_alpha3", "log_ret_es_alpha3", "net_ret_var_alpha3",
"net_ret_es_alpha3", "log_ret_var_alpha4", "log_ret_es_alpha4",
"net_ret_var_alpha4", "net_ret_es_alpha4", "log_ret_var_alpha5",
"log_ret_es_alpha5", "net_ret_var_alpha5", "net_ret_es_alpha5")
# First let's considered the list of coins entering portfolio. Several coins have
# many missing values in the middle of the sample, establish these coins' indices
throw_index_coins <- c()
for (col in cols_portfolio1){
all_series <- c()
for (index_coin in index_coins){
# We will consider portfolio's behaviour starting from 2018-05-01
series <- window(all_data[index_coin, col][[1]][[1]], start = ymd("2018-05-01"))
all_series <- cbind(all_series, series)
}
# If the candidate coin has more than 3 missing values in returns,
# we will not include it in portfolio
throw_index_coins <- c(throw_index_coins, index_coins[colSums(is.na(all_series)) > 3])
}
throw_index_coins <- throw_index_coins %>% unique()
throw_index_coins
# First let's considered the list of coins entering portfolio. Several coins have
# many missing values in the middle of the sample, establish these coins' indices
throw_index_coins <- c()
for (col in cols_portfolio1){
all_series <- c()
for (index_coin in index_coins){
# We will consider portfolio's behaviour starting from 2018-05-01
series <- window(all_data[index_coin, col][[1]][[1]], start = ymd("2018-05-01"))
all_series <- cbind(all_series, series)
}
# If the candidate coin has more than 3 missing values in returns,
# we will not include it in portfolio
throw_index_coins <- c(throw_index_coins, index_coins[colSums(is.na(all_series)) > 10])
}
throw_index_coins <- throw_index_coins %>% unique()
throw_index_coins
index_coins <- index_coins[-throw_index_coins]
all_data <- readRDS("all_data_tests.RData")
index_coins <- seq(1, 100)
# The average of the following columns values will define portfolio characteristics:
cols_portfolio1 <- c("log_ret", "net_ret")
cols_portfolio2 <- c("log_ret_var_alpha1", "log_ret_es_alpha1",
"net_ret_var_alpha1", "net_ret_es_alpha1", "log_ret_var_alpha2",
"log_ret_es_alpha2", "net_ret_var_alpha2", "net_ret_es_alpha2",
"log_ret_var_alpha3", "log_ret_es_alpha3", "net_ret_var_alpha3",
"net_ret_es_alpha3", "log_ret_var_alpha4", "log_ret_es_alpha4",
"net_ret_var_alpha4", "net_ret_es_alpha4", "log_ret_var_alpha5",
"log_ret_es_alpha5", "net_ret_var_alpha5", "net_ret_es_alpha5")
# First let's considered the list of coins entering portfolio. Several coins have
# many missing values in the middle of the sample, establish these coins' indices
throw_index_coins <- c()
for (col in cols_portfolio1){
all_series <- c()
for (index_coin in index_coins){
# We will consider portfolio's behaviour starting from 2018-05-01
series <- window(all_data[index_coin, col][[1]][[1]], start = ymd("2018-05-01"))
all_series <- cbind(all_series, series)
}
# If the candidate coin has more than 3 missing values in returns,
# we will not include it in portfolio
throw_index_coins <- c(throw_index_coins, index_coins[colSums(is.na(all_series)) > 3])
}
throw_index_coins <- throw_index_coins %>% unique()
throw_index_coins
all_data[throw_index_coins, ]
all_data <- readRDS("all_data_tests.RData")
# Write function which takes as an argument all_data and n_coins - number of coins in portfolio
# and returns tibble object with the same columns as in all_data but for constructed portfolio
portfolio_results <- function(all_data, n_coins){
# Index_coins determines the index of coins to xbe used in the porfolio
index_coins <- seq(1, n_coins)
# The average of the following columns values will define portfolio characteristics:
cols_portfolio1 <- c("log_ret", "net_ret")
cols_portfolio2 <- c("log_ret_var_alpha1", "log_ret_es_alpha1",
"net_ret_var_alpha1", "net_ret_es_alpha1", "log_ret_var_alpha2",
"log_ret_es_alpha2", "net_ret_var_alpha2", "net_ret_es_alpha2",
"log_ret_var_alpha3", "log_ret_es_alpha3", "net_ret_var_alpha3",
"net_ret_es_alpha3", "log_ret_var_alpha4", "log_ret_es_alpha4",
"net_ret_var_alpha4", "net_ret_es_alpha4", "log_ret_var_alpha5",
"log_ret_es_alpha5", "net_ret_var_alpha5", "net_ret_es_alpha5")
# First let's considered the list of coins entering portfolio. Several coins have
# many missing values in the middle of the sample, establish these coins' indices
throw_index_coins <- c()
for (col in cols_portfolio1){
all_series <- c()
for (index_coin in index_coins){
# We will consider portfolio's behaviour starting from 2018-05-01
series <- window(all_data[index_coin, col][[1]][[1]], start = ymd("2018-05-01"))
all_series <- cbind(all_series, series)
}
# If the candidate coin has more than 3 missing values in returns,
# we will not include it in portfolio
throw_index_coins <- c(throw_index_coins, index_coins[colSums(is.na(all_series)) > 3])
}
throw_index_coins <- throw_index_coins %>% unique()
index_coins <- index_coins[-throw_index_coins]
# Use info about selected coins to get returns of selected portfolio
# Store portfolio characteristics in `portfolio`
portfolio <- list()
for (col in cols_portfolio1){
# We will consider portfolio's behaviour starting from 2018-05-01
all_series <- c()
for (index_coin in index_coins){
series <- window(all_data[index_coin, col][[1]][[1]], start = ymd("2018-05-01"))
all_series <- cbind(all_series, series)
}
# Throw away all time periods for which at least one series has missing value
all_series <- all_series[!is.na(rowSums(all_series)), ]
portfolio[[col]] <- xts(rowMeans(all_series), order.by = index(all_series)) %>% as.list()
}
# Extract the dates when the info about portfolio returns is available
all_dates_portfolio <- portfolio[["log_ret"]][[1]] %>% index()
# Extract the dates for which VaRs and ES are calculated following our backtesting procedure:
# That is we have to throw away first 250 time periods in `all_dates_portfolio`
all_dates_backtest <- all_dates_portfolio[250:length(all_dates_portfolio)]
# Extract mean VaRs and ES for the dates in all_dates_backtest. Save results in portfolio object
for (col in cols_portfolio2){
# We will consider portfolio's behaviour starting from 2018-05-01
all_series <- c()
for (index_coin in index_coins){
series <- all_data[index_coin, col][[1]][[1]][all_dates_backtest]
all_series <- cbind(all_series, series)
}
portfolio[[col]] <- xts(rowMeans(all_series), order.by = index(all_series)) %>% as.list()
}
# Perform tests for VaRs and ES. Save results in portfolio object
for (ret in c("net_ret", "log_ret")){
for (alpha in c("1", "2", "3", "4", "5")){
portfolio[[paste0(ret, "_vt1_alpha", alpha)]] <- tryCatch({
VaRTest(
as.numeric(alpha)/100, VaR = portfolio[[paste0(ret, "_var_alpha", alpha)]][[1]],
actual = portfolio[[ret]][[1]][all_dates_backtest])$cc.Decision
}, error = function(error_message) {
return(NA)})
portfolio[[paste0(ret, "_vt2_alpha", alpha)]] <- tryCatch({
VaRTest(
as.numeric(alpha)/100, VaR = portfolio[[paste0(ret, "_var_alpha", alpha)]][[1]],
actual = portfolio[[ret]][[1]][all_dates_backtest])$uc.Decision
}, error = function(error_message) {
return(NA)})
portfolio[[paste0(ret, "_et_alpha", alpha)]] <- tryCatch({
ESTest(
as.numeric(alpha)/100, actual = portfolio[[ret]][[1]][all_dates_backtest],
VaR = portfolio[[paste0(ret, "_var_alpha", alpha)]][[1]],
ES = portfolio[[paste0(ret, "_es_alpha", alpha)]][[1]])$Decision
}, error = function(error_message) {
return(NA)})
}
}
# In order to concatenate successfully portfolio object with all_data add some more
# columns in portfolio with NA values
portfolio[["currency_name"]] <- paste0("portfolio", n_coins)
portfolio[["data"]] <- NA
portfolio[["spec_log_ret"]] <- NA
portfolio[["spec_net_ret"]] <- NA
portfolio[["fd_log_ret"]] <- NA
portfolio[["fd_net_ret"]] <- NA
return(as.tibble(portfolio))
}
all_data <- readRDS("all_data_tests.RData")
# estimate results for portfolio with n_coins = 600
all_data <- rbind(portfolio_results(all_data = all_data, n_coins = 600), all_data)
# estimate results for portfolio with n_coins = 500
all_data <- rbind(portfolio_results(all_data = all_data, n_coins = 500), all_data)
# estimate results for portfolio with n_coins = 400
all_data <- rbind(portfolio_results(all_data = all_data, n_coins = 400), all_data)
# estimate results for portfolio with n_coins = 300
all_data <- rbind(portfolio_results(all_data = all_data, n_coins = 300), all_data)
# estimate results for portfolio with n_coins = 200
all_data <- rbind(portfolio_results(all_data = all_data, n_coins = 200), all_data)
# estimate results for portfolio with n_coins = 100
all_data <- rbind(portfolio_results(all_data = all_data, n_coins = 100), all_data)
# Save resulting dataset in `all_data_final.RData`
saveRDS(all_data, file = "all_data_final.RData")
all_data$log_ret_vt1_alpha1
?qdist
# Write down the function which takes as arguments series for which best model is selected
# and candidate specifications and returns the specification with the smallest BIC
all_data <- readRDS("all_data_returns.RData")
select_model <- function(series, specs){
bic_val <- c()
# Fit GARCH model for each specification supplied
for (spec in specs){
fit <- ugarchfit(spec=spec, data=series, solver="hybrid")
# Save model's BIC value. Handle the cases when the fit does not converge
# Assign for these cases large BIC as to not select these specifications
bic_val <- tryCatch({
c(bic_val, infocriteria(fit)[2])
}, error = function(error_message) {
c(bic_val, 100500)})
}
# Select the model with the smallest BIC in case not all models fail to converge
if (min(bic_val) != 100500){
return(specs[[which.min(bic_val)]])
}
# If all models failed to converge, select ARIMA(0, 0) - GARCH(1, 1) model
else{
return(specs[[1]])
}
}
# Put candidate models in `specs` object:
spec1 <- ugarchspec(variance.model = list(garchOrder=c(1,1)),
mean.model = list(armaOrder=c(0,0), arfima = TRUE),
distribution.model = "sstd")
spec2 <- ugarchspec(variance.model = list(garchOrder=c(1,1)),
mean.model = list(armaOrder=c(1,0), arfima = TRUE),
distribution.model = "sstd")
spec3 <- ugarchspec(variance.model = list(garchOrder=c(1,0)),
mean.model = list(armaOrder=c(1,1), arfima = TRUE),
distribution.model = "sstd")
spec3
# Write down the function which takes as arguments series for which best model is selected
# and candidate specifications and returns the specification with the smallest BIC
all_data <- readRDS("all_data_density.RData")
all_data$fd_log_ret[[1]]
?xts
